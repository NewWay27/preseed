# Язык и клавиатура
d-i debian-installer/locale string en_US.UTF-8
d-i keyboard-configuration/xkb-keymap select us

# Сетевые настройки
d-i netcfg/choose_interface select auto
d-i netcfg/get_hostname string debian
d-i netcfg/get_domain string localdomain

# Разбиение диска с шифрованием LUKS
d-i partman-auto/method string crypto
d-i partman-crypto/passphrase password yourpassword
d-i partman-crypto/passphrase-again password yourpassword
d-i partman-auto/choose_recipe select atomic
d-i partman-auto-lvm/new_vg_name string vg
d-i partman-lvm/device_remove_lvm boolean true
d-i partman-md/device_remove_md boolean true

# Пропуск установки GRUB
d-i grub-installer/skip boolean true

# Установка необходимых пакетов
d-i pkgsel/include string systemd-boot-efi efibootmgr sbsigntool dropbear-initramfs

# Настройка backports и обновление системы
d-i preseed/late_command string \
    echo "deb http://deb.debian.org/debian bookworm-backports main" >> /target/etc/apt/sources.list; \
    echo "Package: *\nPin: release n=bookworm-backports\nPin-Priority: 500" > /target/etc/apt/preferences.d/bookworm-backports; \
    in-target apt update && in-target apt full-upgrade -y;

# Установка sbctl с GitHub
d-i preseed/late_command string \
    in-target sh -c "ARCH=\$(dpkg --print-architecture); \
    wget --quiet https://github.com/Foxboron/sbctl/releases/download/0.14/sbctl-0.14-linux-\$ARCH.tar.gz -O - | tar -xz sbctl/sbctl -O > /usr/local/bin/sbctl; \
    chmod +x /usr/local/bin/sbctl";

# Подпись EFI-файлов через sbctl и настройка Secure Boot
d-i preseed/late_command string \
    in-target sbctl create-keys; \
    in-target sbctl enroll-keys; \
    in-target ukify build --linux=/boot/vmlinuz --initrd=/boot/initrd.img --output /boot/efi/EFI/Linux/bootx64.efi; \
    in-target update-initramfs -u -k all;

# Настройка Dropbear для разблокировки LUKS через SSH
d-i preseed/late_command string \
    echo 'DROPBEAR_OPTIONS="-p 1022"' >> /target/etc/dropbear/initramfs/dropbear.conf; \
    ln -s /target/root/.ssh/authorized_keys /target/etc/dropbear/initramfs/authorized_keys;

# Настройка UKI для ядра и добавление конфигурации
d-i preseed/late_command string \
    cat << EOF > /target/etc/kernel/install.conf
layout=uki
uki_generator=ukify
EOF; \
    cat << EOF > /target/etc/kernel/install.d/99-efiboot.install
#!/bin/sh
set -e
[ "\$KERNEL_INSTALL_LAYOUT" = "uki" ] || exit 0
COMMAND="\${1:?}"
KERNEL_VERSION="\${2:?}"
boot=\$(mount | grep "\$KERNEL_INSTALL_BOOT_ROOT" | awk '{print \$1}')
case "\$COMMAND" in
  remove)
    if [ "\$(efibootmgr | grep \$KERNEL_VERSION | wc -l)" -eq "1" ] ; then
      efibootmgr -B -b "\$(efibootmgr | grep \$KERNEL_VERSION | cut -c 5-8)"
    fi
  ;;
  add)
    if [ "\$(efibootmgr | grep \$KERNEL_VERSION | wc -l)" -eq "0" ] ; then
      prefix='\EFI\Linux\'
      efibootmgr -d \$boot -C -L "\${KERNEL_VERSION}" -l "\$prefix\${KERNEL_INSTALL_ENTRY_TOKEN}-\${KERNEL_VERSION}.efi"
    fi
    if [ -f "/boot/initrd.img" ] ; then
      if [ "\$(ls -la /boot/initrd.img | grep \$KERNEL_VERSION | wc -l)" -eq "1" ] ; then
        efibootmgr -o "\$(efibootmgr | grep \$KERNEL_VERSION | cut -c 5-8)"
      fi
    else
      if [ "\$(efibootmgr | grep BootOrder: | grep \$(efibootmgr | grep \$KERNEL_VERSION | cut -c 5-8) | wc -l)" -eq "0" ] ; then
        list=""
        if [ "\$(efibootmgr | grep BootOrder: | awk '{print \$2}' | wc -l)" -eq "1" ] ; then
          list=",\$(efibootmgr | grep BootOrder: | awk '{print \$2}')"
        fi
        efibootmgr -o "\$(efibootmgr | grep \$KERNEL_VERSION | cut -c 5-8)\$list"
      fi
    fi
  ;;
esac
EOF; \
    chmod +x /target/etc/kernel/install.d/99-efiboot.install;

# Дополнительные параметры ядра для безопасности
d-i preseed/late_command string \
    root_fs=\$(cat /target/etc/fstab | grep errors=remount-ro | grep " / " | awk '{print "root=" \$1}'); \
    echo "\$root_fs ro" > /target/etc/kernel/cmdline;
