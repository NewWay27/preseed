# Язык и клавиатура
d-i debian-installer/locale string en_US.UTF-8
d-i keyboard-configuration/xkb-keymap select us

# Сетевые настройки
d-i netcfg/choose_interface select auto
d-i netcfg/get_hostname string debian
d-i netcfg/get_domain string localdomain

# Разбиение диска с шифрованием LUKS
d-i partman-auto/method string crypto
d-i partman-crypto/passphrase password yourpassword
d-i partman-crypto/passphrase-again password yourpassword
d-i partman-auto/choose_recipe select atomic
d-i partman-auto-lvm/new_vg_name string vg
d-i partman-lvm/device_remove_lvm boolean true
d-i partman-md/device_remove_md boolean true

# Пропуск установки GRUB
d-i grub-installer/skip boolean true

# Установка необходимых пакетов
d-i pkgsel/include string systemd-boot-efi efibootmgr sbsigntool dropbear-initramfs

# Настройка backports и обновление системы
d-i preseed/late_command string \
    echo "deb http://deb.debian.org/debian bookworm-backports main" >> /target/etc/apt/sources.list; \
    echo "Package: *\nPin: release n=bookworm-backports\nPin-Priority: 500" > /target/etc/apt/preferences.d/bookworm-backports; \
    in-target apt update && in-target apt full-upgrade -y; \
    in-target sh -c "ARCH=\$(dpkg --print-architecture); wget --quiet https://github.com/Foxboron/sbctl/releases/download/0.14/sbctl-0.14-linux-\$ARCH.tar.gz -O - | tar -xz sbctl/sbctl -O > /usr/local/bin/sbctl; chmod +x /usr/local/bin/sbctl"; \
    in-target sbctl create-keys; in-target sbctl enroll-keys; in-target ukify build --linux=/boot/vmlinuz --initrd=/boot/initrd.img --output /boot/efi/EFI/Linux/bootx64.efi; in-target update-initramfs -u -k all; \
    echo 'DROPBEAR_OPTIONS="-p 1022"' >> /target/etc/dropbear/initramfs/dropbear.conf; ln -s /target/root/.ssh/authorized_keys /target/etc/dropbear/initramfs/authorized_keys; \
    echo -e "layout=uki\nuki_generator=ukify" > /target/etc/kernel/install.conf; \
    echo -e "#!/bin/sh\nset -e\n[ \"\$KERNEL_INSTALL_LAYOUT\" = \"uki\" ] || exit 0\nCOMMAND=\"\${1:?}\"\nKERNEL_VERSION=\"\${2:?}\"\nboot=\$(mount | grep \"\$KERNEL_INSTALL_BOOT_ROOT\" | awk '{print \$1}')\ncase \"\$COMMAND\" in\n  remove)\n    if [ \"\$(efibootmgr | grep \$KERNEL_VERSION | wc -l)\" -eq \"1\" ] ; then\n      efibootmgr -B -b \"\$(efibootmgr | grep \$KERNEL_VERSION | cut -c 5-8)\"\n    fi\n  ;;\n  add)\n    if [ \"\$(efibootmgr | grep \$KERNEL_VERSION | wc -l)\" -eq \"0\" ] ; then\n      prefix='\\EFI\\Linux\\'\n      efibootmgr -d \$boot -C -L \"\${KERNEL_VERSION}\" -l \"\$prefix\${KERNEL_INSTALL_ENTRY_TOKEN}-\${KERNEL_VERSION}.efi\"\n    fi\n    if [ -f \"/boot/initrd.img\" ] ; then\n      if [ \"\$(ls -la /boot/initrd.img | grep \$KERNEL_VERSION | wc -l)\" -eq \"1\" ] ; then\n        efibootmgr -o \"\$(efibootmgr | grep \$KERNEL_VERSION | cut -c 5-8)\"\n      fi\n    else\n      if [ \"\$(efibootmgr | grep BootOrder: | grep \$(efibootmgr | grep \$KERNEL_VERSION | cut -c 5-8) | wc -l)\" -eq \"0\" ] ; then\n        list=\"\"\n        if [ \"\$(efibootmgr
